-- phpMyAdmin SQL Dump
-- version 4.8.3
-- https://www.phpmyadmin.net/
--
-- 主机： 127.0.0.1:3306
-- 生成日期： 2019-01-14 01:54:00
-- 服务器版本： 5.7.23
-- PHP 版本： 5.6.38

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET AUTOCOMMIT = 0;
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- 数据库： `ysu`
--

-- --------------------------------------------------------

--
-- 表的结构 `article`
--

DROP TABLE IF EXISTS `article`;
CREATE TABLE IF NOT EXISTS `article` (
  `art_id` int(255) NOT NULL AUTO_INCREMENT,
  `art_name` char(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `art_art` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `art_intro` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `art_time` date NOT NULL,
  `art_author` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `art_uname` varchar(50) COLLATE utf8mb4_unicode_ci NOT NULL,
  PRIMARY KEY (`art_id`)
) ENGINE=MyISAM AUTO_INCREMENT=16 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='存储文章';

--
-- 转存表中的数据 `article`
--

INSERT INTO `article` (`art_id`, `art_name`, `art_art`, `art_intro`, `art_time`, `art_author`, `art_uname`) VALUES
(1, 'mysql数据库的Date类型日期存储问题', '<div>已经很久没有写过博客了，已经转做java很久了，以前很多文章都是C或者C++的，已经也做过QT，MFC做页面，linux客户端，服务器端开发都做过一些，现在转做java，发现还是有很多区别，闲话少叙，开始正题</div>\r\n<div><br />\r\n</div>\r\n<div>前阵子代码改造，改用调用公司的试算系统进行回款计划的试算，试算系统会返回一个最晚回款日，奇怪的是，返回的值是当天的日期，但是存入数据库之后变成了次日</div>\r\n<div><br />\r\n</div>\r\n<div>然后进行详细的测试证明，试算系统返回的是YYYY-MM-DD 23:59:59.999这种格式的，精确到当天的最后一个毫秒，如果数据库中存储该字段采用的是Date类型，日期会加1，时分秒会自动去掉。</div>\r\n<div><br />\r\n</div>\r\n<div>后经过我自己测试发现，只要大于了YYYY-MM-DD 23:59:59.499的都会自动进位，如果小于或者等于就不会有问题，所以数据库的日期格式一定要注意，如果需要时分秒，就用dateTime类型，如果不需要，就手动的去掉时分秒，再存入数据库，以免出现此类问题</div>\r\n<div>---------------------&nbsp;</div>\r\n<div>作者：????0528&nbsp;</div>\r\n<div>来源：CSDN&nbsp;</div>\r\n<div>原文：https://blog.csdn.net/yangstarss/article/details/79295919&nbsp;</div>\r\n<div>版权声明：本文为博主原创文章，转载请附上博文链接！</div>\r\n', '伟人之所以伟大，应该是因为后人在想到他们的时候依', '2019-01-09', '闫海亮0', '123456'),
(2, '在PHP代码中取得当前日期时间再插入数据库', '<span style=\"box-sizing:border-box;outline:0px;font-family:arial;overflow-wrap:break-word;color:#333333;line-height:26px;font-size:18px;\">方法一: 在PHP代码中取得当前日期时间再插入数据库</span><br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;color:#333333;font-size:14px;font-family:arial;line-height:26px;\" />\r\n<span style=\"box-sizing:border-box;outline:0px;font-family:arial;overflow-wrap:break-word;color:#333333;font-size:14px;line-height:26px;\">默认情况下，PHP解释显示的时间为“格林威治标准时间”，与我们本地的时间相差8个小时</span><br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;color:#333333;font-size:14px;font-family:arial;line-height:26px;\" />\r\n<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;color:#333333;font-size:14px;font-family:arial;line-height:26px;\" />\r\n<span style=\"box-sizing:border-box;outline:0px;font-family:arial;overflow-wrap:break-word;color:#333333;font-size:14px;line-height:26px;\">，所以date(\"Y-m-d H:i:s\")得出的时间比当前时间少了8个小时。</span><br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;color:#333333;font-size:14px;font-family:arial;line-height:26px;\" />\r\n<span style=\"box-sizing:border-box;outline:0px;font-family:arial;overflow-wrap:break-word;color:#333333;font-size:14px;line-height:26px;\">gmdate(\"Y-m-d H:i:s\")函数得出的时间是经过与GMT相加减过的,能得到本地时间,但要在</span><br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;color:#333333;font-size:14px;font-family:arial;line-height:26px;\" />\r\n<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;color:#333333;font-size:14px;font-family:arial;line-height:26px;\" />\r\n<span style=\"box-sizing:border-box;outline:0px;font-family:arial;overflow-wrap:break-word;color:#333333;font-size:14px;line-height:26px;\">PHP.ini中用date.timezone这个选项设置时区,但默认是关闭的,而且在部分PHP版本中无法</span><br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;color:#333333;font-size:14px;font-family:arial;line-height:26px;\" />\r\n<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;color:#333333;font-size:14px;font-family:arial;line-height:26px;\" />\r\n<span style=\"box-sizing:border-box;outline:0px;font-family:arial;overflow-wrap:break-word;color:#333333;font-size:14px;line-height:26px;\">正常实现。</span><br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;color:#333333;font-size:14px;font-family:arial;line-height:26px;\" />\r\n<span style=\"box-sizing:border-box;outline:0px;font-family:arial;overflow-wrap:break-word;color:#333333;font-size:14px;line-height:26px;\">一个比较好的实现的方法，手动修正时差，如下：</span><br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;color:#333333;font-size:14px;font-family:arial;line-height:26px;\" />\r\n<span style=\"box-sizing:border-box;outline:0px;font-family:arial;overflow-wrap:break-word;color:#333333;font-size:14px;line-height:26px;\">$timeoffset = 8;</span><br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;color:#333333;font-size:14px;font-family:arial;line-height:26px;\" />\r\n<span style=\"box-sizing:border-box;outline:0px;font-family:arial;overflow-wrap:break-word;color:#333333;font-size:14px;line-height:26px;\">echo gmdate(\"Y-m-d H:i:s\", mktime() + $timeoffset * 3600) . \"&lt;br&gt;\";</span><br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;color:#333333;font-size:14px;font-family:arial;line-height:26px;\" />\r\n<span style=\"box-sizing:border-box;outline:0px;font-family:arial;overflow-wrap:break-word;color:#333333;font-size:14px;line-height:26px;\">echo gmdate(\"Y-m-d H:i:s\", time() + $timeoffset * 3600) . \"&lt;br&gt;\";</span><br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;color:#333333;font-size:14px;font-family:arial;line-height:26px;\" />\r\n<span style=\"box-sizing:border-box;outline:0px;font-family:arial;overflow-wrap:break-word;color:#333333;font-size:14px;line-height:26px;\">echo date(\"Y-m-d H:i:s\", mktime() + $timeoffset * 3600) . \"&lt;br&gt;\";</span><br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;color:#333333;font-size:14px;font-family:arial;line-height:26px;\" />\r\n<span style=\"box-sizing:border-box;outline:0px;font-family:arial;overflow-wrap:break-word;color:#333333;font-size:14px;line-height:26px;\">echo date(\"Y-m-d H:i:s\", time() + $timeoffset * 3600) . \"&lt;br&gt;\";</span><br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;color:#333333;font-size:14px;font-family:arial;line-height:26px;\" />\r\n<span style=\"box-sizing:border-box;outline:0px;font-family:arial;overflow-wrap:break-word;color:#333333;font-size:14px;line-height:26px;\">都输出如下格式：2007-11-24 17:41:58</span><br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;color:#333333;font-size:14px;font-family:arial;line-height:26px;\" />\r\n<span style=\"box-sizing:border-box;outline:0px;font-family:arial;overflow-wrap:break-word;color:#333333;font-size:14px;line-height:26px;\">$t = gmdate(\"Y-m-d H:i:s\", mktime() + 8 * 3600)</span><br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;color:#333333;font-size:14px;font-family:arial;line-height:26px;\" />\r\n<span style=\"box-sizing:border-box;outline:0px;font-family:arial;overflow-wrap:break-word;color:#333333;font-size:14px;line-height:26px;\">$sql = \"insert into xxxx (addDateTime) values ($t)\"</span><br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;color:#333333;font-size:14px;font-family:arial;line-height:26px;\" />\r\n<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;color:#333333;font-size:14px;font-family:arial;line-height:26px;\" />\r\n<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;color:#333333;font-size:14px;font-family:arial;line-height:26px;\" />\r\n<span style=\"box-sizing:border-box;outline:0px;font-family:arial;overflow-wrap:break-word;color:#333333;line-height:26px;font-size:18px;\">方法二: 在SQL语句中使用MYSQL内置的函数取得当前日期时间</span><br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;color:#333333;font-size:14px;font-family:arial;line-height:26px;\" />\r\n<span style=\"box-sizing:border-box;outline:0px;font-family:arial;overflow-wrap:break-word;color:#333333;font-size:14px;line-height:26px;\">使用now()函数</span><br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;color:#333333;font-size:14px;font-family:arial;line-height:26px;\" />\r\n<span style=\"box-sizing:border-box;outline:0px;font-family:arial;overflow-wrap:break-word;color:#333333;font-size:14px;line-height:26px;\">insert into xxxx (addDateTime) values (now())</span><br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;color:#333333;font-size:14px;font-family:arial;line-height:26px;\" />\r\n<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;color:#333333;font-size:14px;font-family:arial;line-height:26px;\" />\r\n<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;color:#333333;font-size:14px;font-family:arial;line-height:26px;\" />\r\n<span style=\"box-sizing:border-box;outline:0px;font-family:arial;overflow-wrap:break-word;color:#333333;line-height:26px;font-size:18px;\">小结</span><span style=\"box-sizing:border-box;outline:0px;font-family:arial;overflow-wrap:break-word;color:#333333;font-size:14px;line-height:26px;\">:</span><br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;color:#333333;font-size:14px;font-family:arial;line-height:26px;\" />\r\n<span style=\"box-sizing:border-box;outline:0px;font-family:arial;overflow-wrap:break-word;color:#333333;font-size:14px;line-height:26px;\">相比上述两种方法,使用MYSQL内置函数比较好</span>', '伟人之所以伟大，应该是因为后人在想到他们的时候依旧肃然起敬。当下我的心情亦是如此。', '2019-01-09', '论坛一号', '151304011003'),
(3, '在PHP代码中取得当前日期时间再插入数据库', '<span style=\"box-sizing:border-box;outline:0px;font-family:arial;overflow-wrap:break-word;color:#333333;line-height:26px;font-size:18px;\">方法一: 在PHP代码中取得当前日期时间再插入数据库</span><br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;color:#333333;font-size:14px;font-family:arial;line-height:26px;\" />\r\n<span style=\"box-sizing:border-box;outline:0px;font-family:arial;overflow-wrap:break-word;color:#333333;font-size:14px;line-height:26px;\">默认情况下，PHP解释显示的时间为“格林威治标准时间”，与我们本地的时间相差8个小时</span><br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;color:#333333;font-size:14px;font-family:arial;line-height:26px;\" />\r\n<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;color:#333333;font-size:14px;font-family:arial;line-height:26px;\" />\r\n<span style=\"box-sizing:border-box;outline:0px;font-family:arial;overflow-wrap:break-word;color:#333333;font-size:14px;line-height:26px;\">，所以date(\"Y-m-d H:i:s\")得出的时间比当前时间少了8个小时。</span><br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;color:#333333;font-size:14px;font-family:arial;line-height:26px;\" />\r\n<span style=\"box-sizing:border-box;outline:0px;font-family:arial;overflow-wrap:break-word;color:#333333;font-size:14px;line-height:26px;\">gmdate(\"Y-m-d H:i:s\")函数得出的时间是经过与GMT相加减过的,能得到本地时间,但要在</span><br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;color:#333333;font-size:14px;font-family:arial;line-height:26px;\" />\r\n<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;color:#333333;font-size:14px;font-family:arial;line-height:26px;\" />\r\n<span style=\"box-sizing:border-box;outline:0px;font-family:arial;overflow-wrap:break-word;color:#333333;font-size:14px;line-height:26px;\">PHP.ini中用date.timezone这个选项设置时区,但默认是关闭的,而且在部分PHP版本中无法</span><br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;color:#333333;font-size:14px;font-family:arial;line-height:26px;\" />\r\n<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;color:#333333;font-size:14px;font-family:arial;line-height:26px;\" />\r\n<span style=\"box-sizing:border-box;outline:0px;font-family:arial;overflow-wrap:break-word;color:#333333;font-size:14px;line-height:26px;\">正常实现。</span><br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;color:#333333;font-size:14px;font-family:arial;line-height:26px;\" />\r\n<span style=\"box-sizing:border-box;outline:0px;font-family:arial;overflow-wrap:break-word;color:#333333;font-size:14px;line-height:26px;\">一个比较好的实现的方法，手动修正时差，如下：</span><br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;color:#333333;font-size:14px;font-family:arial;line-height:26px;\" />\r\n<span style=\"box-sizing:border-box;outline:0px;font-family:arial;overflow-wrap:break-word;color:#333333;font-size:14px;line-height:26px;\">$timeoffset = 8;</span><br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;color:#333333;font-size:14px;font-family:arial;line-height:26px;\" />\r\n<span style=\"box-sizing:border-box;outline:0px;font-family:arial;overflow-wrap:break-word;color:#333333;font-size:14px;line-height:26px;\">echo gmdate(\"Y-m-d H:i:s\", mktime() + $timeoffset * 3600) . \"&lt;br&gt;\";</span><br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;color:#333333;font-size:14px;font-family:arial;line-height:26px;\" />\r\n<span style=\"box-sizing:border-box;outline:0px;font-family:arial;overflow-wrap:break-word;color:#333333;font-size:14px;line-height:26px;\">echo gmdate(\"Y-m-d H:i:s\", time() + $timeoffset * 3600) . \"&lt;br&gt;\";</span><br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;color:#333333;font-size:14px;font-family:arial;line-height:26px;\" />\r\n<span style=\"box-sizing:border-box;outline:0px;font-family:arial;overflow-wrap:break-word;color:#333333;font-size:14px;line-height:26px;\">echo date(\"Y-m-d H:i:s\", mktime() + $timeoffset * 3600) . \"&lt;br&gt;\";</span><br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;color:#333333;font-size:14px;font-family:arial;line-height:26px;\" />\r\n<span style=\"box-sizing:border-box;outline:0px;font-family:arial;overflow-wrap:break-word;color:#333333;font-size:14px;line-height:26px;\">echo date(\"Y-m-d H:i:s\", time() + $timeoffset * 3600) . \"&lt;br&gt;\";</span><br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;color:#333333;font-size:14px;font-family:arial;line-height:26px;\" />\r\n<span style=\"box-sizing:border-box;outline:0px;font-family:arial;overflow-wrap:break-word;color:#333333;font-size:14px;line-height:26px;\">都输出如下格式：2007-11-24 17:41:58</span><br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;color:#333333;font-size:14px;font-family:arial;line-height:26px;\" />\r\n<span style=\"box-sizing:border-box;outline:0px;font-family:arial;overflow-wrap:break-word;color:#333333;font-size:14px;line-height:26px;\">$t = gmdate(\"Y-m-d H:i:s\", mktime() + 8 * 3600)</span><br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;color:#333333;font-size:14px;font-family:arial;line-height:26px;\" />\r\n<span style=\"box-sizing:border-box;outline:0px;font-family:arial;overflow-wrap:break-word;color:#333333;font-size:14px;line-height:26px;\">$sql = \"insert into xxxx (addDateTime) values ($t)\"</span><br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;color:#333333;font-size:14px;font-family:arial;line-height:26px;\" />\r\n<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;color:#333333;font-size:14px;font-family:arial;line-height:26px;\" />\r\n<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;color:#333333;font-size:14px;font-family:arial;line-height:26px;\" />\r\n<span style=\"box-sizing:border-box;outline:0px;font-family:arial;overflow-wrap:break-word;color:#333333;line-height:26px;font-size:18px;\">方法二: 在SQL语句中使用MYSQL内置的函数取得当前日期时间</span><br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;color:#333333;font-size:14px;font-family:arial;line-height:26px;\" />\r\n<span style=\"box-sizing:border-box;outline:0px;font-family:arial;overflow-wrap:break-word;color:#333333;font-size:14px;line-height:26px;\">使用now()函数</span><br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;color:#333333;font-size:14px;font-family:arial;line-height:26px;\" />\r\n<span style=\"box-sizing:border-box;outline:0px;font-family:arial;overflow-wrap:break-word;color:#333333;font-size:14px;line-height:26px;\">insert into xxxx (addDateTime) values (now())</span><br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;color:#333333;font-size:14px;font-family:arial;line-height:26px;\" />\r\n<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;color:#333333;font-size:14px;font-family:arial;line-height:26px;\" />\r\n<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;color:#333333;font-size:14px;font-family:arial;line-height:26px;\" />\r\n<span style=\"box-sizing:border-box;outline:0px;font-family:arial;overflow-wrap:break-word;color:#333333;line-height:26px;font-size:18px;\">小结</span><span style=\"box-sizing:border-box;outline:0px;font-family:arial;overflow-wrap:break-word;color:#333333;font-size:14px;line-height:26px;\">:</span><br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;color:#333333;font-size:14px;font-family:arial;line-height:26px;\" />\r\n<span style=\"box-sizing:border-box;outline:0px;font-family:arial;overflow-wrap:break-word;color:#333333;font-size:14px;line-height:26px;\">相比上述两种方法,使用MYSQL内置函数比较好</span>', '伟人之所以伟大，应该是因为后人在想到他们的时候依旧肃然起敬。当下我的心情亦是如此。', '2019-01-09', '闫海亮0', '123456'),
(4, 'V - Layout：淘宝、天猫都在用的UI框架，赶紧用起来吧！', '<p style=\"box-sizing:border-box;outline:0px;padding:0px;margin-top:0px;margin-bottom:16px;font-family:&quot;Microsoft YaHei&quot;, &quot;SF Pro Display&quot;, Roboto, Noto, Arial, &quot;PingFang SC&quot;, sans-serif;font-size:16px;color:#4f4f4f;line-height:26px;overflow-wrap:break-word;font-variant-ligatures:common-ligatures;\">前言&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n● V- Layout 是阿里出品的基础 UI 框架，用于快速实现页面的复杂布局，在手机天猫 Android版 内广泛使用</p>\r\n<p style=\"box-sizing:border-box;outline:0px;padding:0px;margin-top:0px;margin-bottom:16px;font-family:&quot;Microsoft YaHei&quot;, &quot;SF Pro Display&quot;, Roboto, Noto, Arial, &quot;PingFang SC&quot;, sans-serif;font-size:16px;color:#4f4f4f;line-height:26px;overflow-wrap:break-word;font-variant-ligatures:common-ligatures;\">● 让人激动的是，在上个月V- Layout终于在Github上开源！&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\nGithub - alibaba - vlayout</p>\r\n<p style=\"box-sizing:border-box;outline:0px;padding:0px;margin-top:0px;margin-bottom:16px;font-family:&quot;Microsoft YaHei&quot;, &quot;SF Pro Display&quot;, Roboto, Noto, Arial, &quot;PingFang SC&quot;, sans-serif;font-size:16px;color:#4f4f4f;line-height:26px;overflow-wrap:break-word;font-variant-ligatures:common-ligatures;\">● 在五一假期我对V- Layout进行了详细分析，我将献上一份 V- Layout的使用攻略 &amp; 源码分析，希望你们会喜欢。&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n目录</p>\r\n<ol style=\"box-sizing:border-box;outline:0px;padding:0px;margin:0px 0px 24px;list-style:none;font-family:&quot;Microsoft YaHei&quot;, &quot;SF Pro Display&quot;, Roboto, Noto, Arial, &quot;PingFang SC&quot;, sans-serif;overflow-wrap:break-word;color:rgba(0, 0, 0, 0.75);font-size:14px;font-variant-ligatures:common-ligatures;\"><li style=\"box-sizing:border-box;outline:0px;padding:0px;margin:8px 0px 0px 40px;list-style-type:decimal;overflow-wrap:break-word;\">为什么要使用 V - Layout在讲解&nbsp;<code style=\"box-sizing:border-box;outline:0px;font-family:&quot;Source Code Pro&quot;, &quot;DejaVu Sans Mono&quot;, &quot;Ubuntu Mono&quot;, &quot;Anonymous Pro&quot;, &quot;Droid Sans Mono&quot;, Menlo, Monaco, Consolas, Inconsolata, Courier, monospace, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, sans-serif;padding:2px 4px;line-height:22px;color:#c7254e;background-color:#f9f2f4;border-radius:2px;overflow-wrap:break-word;\">V - Layout</code>&nbsp;前，我们先来搞懂一个问题：为什么要使用&nbsp;<code style=\"box-sizing:border-box;outline:0px;font-family:&quot;Source Code Pro&quot;, &quot;DejaVu Sans Mono&quot;, &quot;Ubuntu Mono&quot;, &quot;Anonymous Pro&quot;, &quot;Droid Sans Mono&quot;, Menlo, Monaco, Consolas, Inconsolata, Courier, monospace, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, sans-serif;padding:2px 4px;line-height:22px;color:#c7254e;background-color:#f9f2f4;border-radius:2px;overflow-wrap:break-word;\">V - Layout</code>&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n1.1 背景&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n● Android中 UI 性能消耗主要来自于两个方面：&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\na. 布局层次嵌套导致多重 measure/layout&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\nb. View控件的创建和销毁&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n● 为了解决上述问题，现有的解决方式是：&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\na. 少用嵌套布局&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\nb. 使用 ListView/GirdView/RecyclerView等基础空间来处理View的回收与复用。&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n但是，很多时候我们需要在一个长列表下做多种类型的布局来分配各种元素,，特别是电商平台首页等页面，布局元素结构更加复杂多样。如下图：</li>\r\n</ol>\r\n<p style=\"box-sizing:border-box;outline:0px;padding:0px;margin-top:0px;margin-bottom:16px;font-family:&quot;Microsoft YaHei&quot;, &quot;SF Pro Display&quot;, Roboto, Noto, Arial, &quot;PingFang SC&quot;, sans-serif;font-size:16px;color:#4f4f4f;line-height:26px;overflow-wrap:break-word;font-variant-ligatures:common-ligatures;\">此时的解决方案有所变化：不采用子View的复用，只采用一个主要的复用容器（如ListView 或 RecyclerView+LinearLayoutManager），然后在其中使用嵌套方式直接用各个组件进行拼接，减少了复用的能力&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n1.2 问题&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n这种做法还是会损失Android应用的性能。&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n1.3 解决方案&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n● 通过自定义 LayoutManager 管理所有的布局类型&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n● 即阿里出品的基础 UI 框架项目 VirtualLayout就是采用该方式来解决上述问题&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n2. 简介&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n● 定义：VirtualLayout是阿里出品的基础 UI 框架项目&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n● 作用：快速实现复杂的布局格式的混排&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n○ 基于 RecyclerView &amp; LayoutManager扩展&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n○ 目前已在Github开源：Github - alibaba - vlayout</p>\r\n<ol style=\"box-sizing:border-box;outline:0px;padding:0px;margin:0px 0px 24px;list-style:none;font-family:&quot;Microsoft YaHei&quot;, &quot;SF Pro Display&quot;, Roboto, Noto, Arial, &quot;PingFang SC&quot;, sans-serif;overflow-wrap:break-word;color:rgba(0, 0, 0, 0.75);font-size:14px;font-variant-ligatures:common-ligatures;\"><li style=\"box-sizing:border-box;outline:0px;padding:0px;margin:8px 0px 0px 40px;list-style-type:decimal;overflow-wrap:break-word;\"><p style=\"box-sizing:border-box;outline:0px;padding:0px;margin-top:0px;margin-bottom:16px;font-size:16px;color:#4f4f4f;line-height:26px;overflow-wrap:break-word;\">应用场景&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n● 复杂的布局格式混排，如：浮动布局、栏格布局、通栏布局、一拖N布局、瀑布流布局，还可以组合使用这些布局&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n● 具体场景是：如电商平台首页、活动页等等&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\nV - Layout 目前已在手机天猫 &amp; 淘宝 Android 版内广泛使用</p>\r\n</li>\r\n<li style=\"box-sizing:border-box;outline:0px;padding:0px;margin:8px 0px 0px 40px;list-style-type:decimal;overflow-wrap:break-word;\"><p style=\"box-sizing:border-box;outline:0px;padding:0px;margin-top:0px;margin-bottom:16px;font-size:16px;color:#4f4f4f;line-height:26px;overflow-wrap:break-word;\">原理解析&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\nV - Layout的本质原理是：通过自定义一个VirtualLayoutManager（继承自 LayoutManager），用于管理一系列LayoutHelper，将具体的布局能力交给LayoutHelper来完成，从而 快速实现组合布局 的需求。</p>\r\n<ol style=\"box-sizing:border-box;outline:0px;padding:0px;margin:0px;list-style:none;overflow-wrap:break-word;\"><li style=\"box-sizing:border-box;outline:0px;padding:0px;margin:8px 0px 0px 40px;list-style-type:decimal;overflow-wrap:break-word;\">每个 LayoutHelper负责 页面某一个范围内的布局</li>\r\n<li style=\"box-sizing:border-box;outline:0px;padding:0px;margin:8px 0px 0px 40px;list-style-type:decimal;overflow-wrap:break-word;\">V - Layout默认实现了10种默认布局：（对应同名的LayoutHelper）</li>\r\n</ol>\r\n</li>\r\n</ol>\r\n<p style=\"box-sizing:border-box;outline:0px;padding:0px;margin-top:0px;margin-bottom:16px;font-family:&quot;Microsoft YaHei&quot;, &quot;SF Pro Display&quot;, Roboto, Noto, Arial, &quot;PingFang SC&quot;, sans-serif;font-size:16px;color:#4f4f4f;line-height:26px;overflow-wrap:break-word;font-variant-ligatures:common-ligatures;\">4.1 源码类说明&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\nV - Layout的源码类图如下：</p>\r\n<p style=\"box-sizing:border-box;outline:0px;padding:0px;margin-top:0px;margin-bottom:16px;font-family:&quot;Microsoft YaHei&quot;, &quot;SF Pro Display&quot;, Roboto, Noto, Arial, &quot;PingFang SC&quot;, sans-serif;font-size:16px;color:#4f4f4f;line-height:26px;overflow-wrap:break-word;font-variant-ligatures:common-ligatures;\">1.RecyclerView&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n● 定义：页面布局的主体&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n● 特别注意：在V - layout框架里绑定 VirtualLayoutAdapter（继承Adapter） &amp; VirtualLayoutManager（继承LayoutManager）&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n2. VirtualLayoutAdapter&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n● 定义：数据适配器。&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n继承自系统的Adaper&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n● 作用：创建组件 &amp; 绑定数据到组件&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n● 额外：定义了两个接口：&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\na. getLayoutHelper()：用于返回某个位置组件对应的一个LayoutHelper&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\nb. setLayoutHelpers()：调用此方法设置整个页面所需要的一系列LayoutHelper&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n这两方法的具体实现委托给 VirtualLayoutManager完成&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n3. VirtualLayoutManager&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n● 定义：布局管理器&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n继承自系统的 LinearLayoutManager&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n● 作用：&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\na. 在 RecyclerView加载组件或者滑动时调用VirtualLayoutManager 的layoutChunk（），返回当前还有哪些空白区域可摆放组件&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\nb. 管理 LayoutHelper列表&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n● 额外：实现了VirtualLayoutAdapter的 getLayoutHelper() &amp; setLayoutHelpers()&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n4. LayoutHelperFinder&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n● 定义：LayoutHelper 寻找器&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n● 作用：根据页面状态 寻找对应的 LayoutHelper 并返回给 VirtualLayoutManager&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\na. VirtualLayoutManager会持有一个LayoutHelperFinder&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\nb. 当layoutChunck（）被调用时会传入一个位置参数，告诉VirtualLayoutManager当前要布局第几个组件&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\nc. VirtualLayoutManager通知持有的 LayoutHelperFinder找到传入参数位置对应的 LayoutHelper（每个 LayoutHelper 都会绑定它负责的布局区域的起始位置和结束位置）</p>\r\n<ol style=\"box-sizing:border-box;outline:0px;padding:0px;margin:0px 0px 24px;list-style:none;font-family:&quot;Microsoft YaHei&quot;, &quot;SF Pro Display&quot;, Roboto, Noto, Arial, &quot;PingFang SC&quot;, sans-serif;overflow-wrap:break-word;color:rgba(0, 0, 0, 0.75);font-size:14px;font-variant-ligatures:common-ligatures;\"><li style=\"box-sizing:border-box;outline:0px;padding:0px;margin:8px 0px 0px 40px;list-style-type:decimal;overflow-wrap:break-word;\">LayoutHelper&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n● 定义：布局协助器&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n● 作用：负责具体的布局逻辑&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n● 其中定义了一系列接口用于和VirtualLayoutManager通信：&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n接口作用isOutOfRange()告诉VirtualLayoutManager它所传递过来位置是否在当前LayoutHelper的布局区域内；setRange()设置当前LayoutHelper负责的布局区域doLayout()真正的布局逻辑接口beforeLayout()在布局前做一些前置工作afterLayout()在布局完成后做一些后置工作</li>\r\n<li style=\"box-sizing:border-box;outline:0px;padding:0px;margin:8px 0px 0px 40px;list-style-type:decimal;overflow-wrap:break-word;\">MarginLayoutHelper&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n● 定义：继承自 LayoutHelper&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n● 作用：扩展LayoutHelper，提供了布局常用的内边距padding、外边距margin的计算功能</li>\r\n<li style=\"box-sizing:border-box;outline:0px;padding:0px;margin:8px 0px 0px 40px;list-style-type:decimal;overflow-wrap:break-word;\">BaseLayoutHelper&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n● 定义：MarginLayoutHelper的第一层具体实现&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n● 作用：填充 当前LayoutHelper在屏幕范围内的具体区域 背景色、背景图等逻辑</li>\r\n<li style=\"box-sizing:border-box;outline:0px;padding:0px;margin:8px 0px 0px 40px;list-style-type:decimal;overflow-wrap:break-word;\">子LayoutHelper&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n● 定义：MarginLayoutHelper的第二层具体实现&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n● 作用：负责具体的布局逻辑&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\na. 每种子LayoutHelper负责一种布局逻辑&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\nb. 重点实现了beforeLayout()、doLayout()、afterLayout()&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\nc. 特别是doLayout()：会获取一组件，并对组件进行尺寸计算、界面布局。&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\nd. V - Layout默认实现了10种默认布局：（对应同名的LayoutHelper）</li>\r\n</ol>\r\n<p style=\"box-sizing:border-box;outline:0px;padding:0px;margin-top:0px;margin-bottom:16px;font-family:&quot;Microsoft YaHei&quot;, &quot;SF Pro Display&quot;, Roboto, Noto, Arial, &quot;PingFang SC&quot;, sans-serif;font-size:16px;color:#4f4f4f;line-height:26px;overflow-wrap:break-word;font-variant-ligatures:common-ligatures;\">下面会进行详细介绍。&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n● 特别注意：&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\na. 每一种LayoutHelper负责布局一批组件范围内的组件，不同组件范围内的组件之间，如果类型相同，可以在滑动过程中回收复用。因此回收粒度比较细，且可以跨布局类型复用。&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\nb. 支持扩展外部：即注册新的LayoutHelper，实现特殊的布局方式。下面会详细说明&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n介绍完类之后，我将详细分析 V - Layout的工作流程。&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n4.2 工作流程&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n● V - Layout的工作流程分为 初始化 &amp; 布局流程。如下图：</p>\r\n<p style=\"box-sizing:border-box;outline:0px;padding:0px;margin-top:0px;margin-bottom:16px;font-family:&quot;Microsoft YaHei&quot;, &quot;SF Pro Display&quot;, Roboto, Noto, Arial, &quot;PingFang SC&quot;, sans-serif;font-size:16px;color:#4f4f4f;line-height:26px;overflow-wrap:break-word;font-variant-ligatures:common-ligatures;\">● 下面我将对初始化 &amp; 布局流程作详细分析。&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n4.2.1 初始化</p>\r\n<p style=\"box-sizing:border-box;outline:0px;padding:0px;margin-top:0px;margin-bottom:16px;font-family:&quot;Microsoft YaHei&quot;, &quot;SF Pro Display&quot;, Roboto, Noto, Arial, &quot;PingFang SC&quot;, sans-serif;font-size:16px;color:#4f4f4f;line-height:26px;overflow-wrap:break-word;font-variant-ligatures:common-ligatures;\">● 在使用 V - layout 快速实现复杂布局前，需要先做一系列的初始化工作。&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n初始化流程与使用普通的 RecyclerView + LayoutManager 初始化流程基本一致：Vlayout的使用者</p>\r\n<p style=\"box-sizing:border-box;outline:0px;padding:0px;margin-top:0px;margin-bottom:16px;font-family:&quot;Microsoft YaHei&quot;, &quot;SF Pro Display&quot;, Roboto, Noto, Arial, &quot;PingFang SC&quot;, sans-serif;font-size:16px;color:#4f4f4f;line-height:26px;overflow-wrap:break-word;font-variant-ligatures:common-ligatures;\">此处的初始化 实际上 就是 使用者在使用 V - layout 时需要做的初始化工作，在下面的实例讲解我会进行更加详细的说明。&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n4.2.2 具体布局流程&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n● 当完成初始化工作后，每当用户刚打开页面第一次渲染布局 或 用户滑动页面时，都会进行一次布局流程&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n● 布局流程的本质是：自定义 VirtualLayoutManager持续获取页面状态，并通过LayoutHelperFinder找到对应的LayoutHelper从而实现对应的布局逻辑，从而快速实现组合布局 的需求&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n● 具体流程如下</p>\r\n<p style=\"box-sizing:border-box;outline:0px;padding:0px;margin-top:0px;margin-bottom:16px;font-family:&quot;Microsoft YaHei&quot;, &quot;SF Pro Display&quot;, Roboto, Noto, Arial, &quot;PingFang SC&quot;, sans-serif;font-size:16px;color:#4f4f4f;line-height:26px;overflow-wrap:break-word;font-variant-ligatures:common-ligatures;\">总结&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n下面用一张图总结 V - Layout 的原理 &amp; 工作流程</p>\r\n<p style=\"box-sizing:border-box;outline:0px;padding:0px;margin-top:0px;margin-bottom:16px;font-family:&quot;Microsoft YaHei&quot;, &quot;SF Pro Display&quot;, Roboto, Noto, Arial, &quot;PingFang SC&quot;, sans-serif;font-size:16px;color:#4f4f4f;line-height:26px;overflow-wrap:break-word;font-variant-ligatures:common-ligatures;\">在讲完原理后，接下来我将如何使用 V - Layout。&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n5. 使用步骤&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n● V - Layout的使用其实就是上面说的初始化工作&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n● 使用步骤如下：</p>\r\n<p style=\"box-sizing:border-box;outline:0px;padding:0px;margin-top:0px;margin-bottom:16px;font-family:&quot;Microsoft YaHei&quot;, &quot;SF Pro Display&quot;, Roboto, Noto, Arial, &quot;PingFang SC&quot;, sans-serif;font-size:16px;color:#4f4f4f;line-height:26px;overflow-wrap:break-word;font-variant-ligatures:common-ligatures;\">下面我将对每个步骤进行详细说明。&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n步骤1：创建RecyclerView &amp; VirtualLayoutManager 对象并进行绑定&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\nrecyclerView = (RecyclerView) findViewById(R.id.my_recycler_view); // 创建RecyclerView对象 VirtualLayoutManager layoutManager = new VirtualLayoutManager(this); // 创建VirtualLayoutManager对象// 同时内部会创建一个LayoutHelperFinder对象，用来后续的LayoutHelper查找 recyclerView.setLayoutManager(layoutManager); // 将VirtualLayoutManager绑定到recyclerView&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n● 1&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n● 2&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n● 3&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n● 4&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n● 5&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n● 6&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n● 7&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n● 8&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n● 9&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n● 10&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n● 1&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n● 2&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n● 3&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n● 4&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n● 5&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n● 6&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n● 7&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n● 8&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n● 9&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n● 10&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n步骤2：设置回收复用池大小&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n如果一屏内相同类型的 View 个数比较多，需要设置一个合适的大小，防止来回滚动时重新创建 View）&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n// 设置组件复用回收池 RecyclerView.RecycledViewPool viewPool = new RecyclerView.RecycledViewPool(); recyclerView.setRecycledViewPool(viewPool); viewPool.setMaxRecycledViews(0, 10);&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n● 1&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n● 2&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n● 3&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n● 4&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n● 1&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n● 2&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n● 3&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n● 4&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n步骤3：设置Adapter&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n设置 V - Layout的Adapter有两种方式:&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n● 方式1：继承 自 DelegateAdapter&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n● 方式2：继承 自 VirtualLayoutAdapter&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n下面会进行详细说明：&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n方式1：继承 自 DelegateAdapter&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n● 定义：DelegateAdapter是V - Layout专门为管理 LayoutHelper定制的 Adapter&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n继承自VirtualLayoutAdapter&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n● 作用：通过管理不同布局的Adapter，继而管理不同的 LayoutHelper，从而实现使用不同组合布局&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\na. 特别注意：虽不可直接绑定LayoutHelper，但是它内部有一个继承自RecyclerView.Adapter的内部类Adapter可以绑定LayoutHelper；&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\nb. 即通过一个List把绑定好的Adapter打包起来，再放去DelegateAdapter，这样就可以实现组合使用不同的布局&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\n● 具体做法：&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\na. 写法与复写系统自带的Adapter非常类似：只比系统自带的RecyclerAdapter需要多重载onCreateLayoutHelper方法，其余类似&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\nb. 关于Android系统自带的RecyclerAdapter的使用具体请看我写的文章Android开发：ListView、AdapterView、RecyclerView全面解析&nbsp;<br style=\"box-sizing:border-box;outline:0px;overflow-wrap:break-word;\" />\r\npublicclassMyAdapterextendsDelegateAdapter.Adapter</p>\r\n', '伟人之所以伟大，应该是因为后人在想到他们的时候依旧肃然起敬。当下我的心情亦是如此。', '2019-01-09', '闫海亮0', '123456'),
(5, '2342222', '2223423423', '伟人之所以伟大，应该是因为后人在想到他们的时候依旧肃然起敬。当下我的心情亦是如此。', '2019-01-09', '论坛一号', '151304011003'),
(6, 'mysql数据库的Date类型日期存储问题', '<div>已经很久没有写过博客了，已经转做java很久了，以前很多文章都是C或者C++的，已经也做过QT，MFC做页面，linux客户端，服务器端开发都做过一些，现在转做java，发现还是有很多区别，闲话少叙，开始正题</div>\r\n<div><br />\r\n</div>\r\n<div>前阵子代码改造，改用调用公司的试算系统进行回款计划的试算，试算系统会返回一个最晚回款日，奇怪的是，返回的值是当天的日期，但是存入数据库之后变成了次日</div>\r\n<div><br />\r\n</div>\r\n<div>然后进行详细的测试证明，试算系统返回的是YYYY-MM-DD 23:59:59.999这种格式的，精确到当天的最后一个毫秒，如果数据库中存储该字段采用的是Date类型，日期会加1，时分秒会自动去掉。</div>\r\n<div><br />\r\n</div>\r\n<div>后经过我自己测试发现，只要大于了YYYY-MM-DD 23:59:59.499的都会自动进位，如果小于或者等于就不会有问题，所以数据库的日期格式一定要注意，如果需要时分秒，就用dateTime类型，如果不需要，就手动的去掉时分秒，再存入数据库，以免出现此类问题</div>\r\n<div>---------------------&nbsp;</div>\r\n<div>作者：????0528&nbsp;</div>\r\n<div>来源：CSDN&nbsp;</div>\r\n<div>原文：https://blog.csdn.net/yangstarss/article/details/79295919&nbsp;</div>\r\n<div>版权声明：本文为博主原创文章，转载请附上博文链接！</div>\r\n', '伟人之所以伟大，应该是因为后人在想到他们的时候依旧肃然起敬。当下我的心情亦是如此。', '2019-01-09', '论坛一号', '151304011003'),
(7, '【面经】寒冬中的一年半前端跳槽', '<div><div><p>首先前端基础要过关，可以参考<a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fleohxj.gitbooks.io%2Ffront-end-database%2Fcontent%2Fjavascript-basic%2Findex.html\" rel=\"nofollow noopener noreferrer\">前端工程师手册</a>、<a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F32911022\" rel=\"nofollow noopener noreferrer\">合格前端系列第九弹-前端面试那些事</a>、<a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F34536462\" rel=\"nofollow noopener noreferrer\">2018前端面试押题（讲义）</a>、<a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fmountain-buzhou.github.io%2FInterview-Book%2Fguide%2F\" rel=\"nofollow noopener noreferrer\">Interview Book</a>。</p>\r\n<p>其次，因为我是在小厂，所以可能项目复杂度没那么高，我就尽量把手头上用到过的东西都搞明白设计原理，比如vue、express、vue-lazyloader、promise等等，平时也会造一些轮子，其实这些对业务开发都是有好处的，起码可以让你知道自己在写啥。最后，计算机基础也是抛不开的，LeetCode刷200题左右，常见的排序、搜索、树遍历算法都要会，而且以这几个为基础的变形也要能看出来。</p>\r\n<p>还有就是面试的时候的一些技巧，因为我本身表达能力还行，面试基本不紧张，说说笑笑也就过去了，之前在公司也当过一年的面试官，这方面发怵的同学可以做一些相关的准备。</p>\r\n</div>\r\n<br />\r\n作者：亚古<br />\r\n链接：https://juejin.im/post/5c356f68f265da61483bca61<br />\r\n来源：掘金<br />\r\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</div>\r\n', ' 小米的面试官给人的感觉很亲切很真诚，是一个体验很不错的面试。', '2019-01-09', '闫海亮0', '123456'),
(13, '发帖发帖发帖发帖发帖发帖发帖发帖', '发帖发帖发帖发帖发帖发帖发帖发帖发帖发帖发帖发帖发帖发帖发帖发帖发帖发帖发帖发帖发帖发帖发帖发帖发帖发帖发帖发帖发帖发帖发帖发帖发帖发帖发帖发帖发帖发帖发帖发帖发帖发帖发帖发帖发帖发帖发帖发帖发帖发帖发帖发帖发帖发帖发帖发帖发帖发帖发帖发帖发帖发帖发帖发帖发帖发帖发帖发帖发帖发帖发帖发帖发帖发帖', ' 发帖发帖发帖发帖发帖发帖', '2019-01-11', 'YSU会员_4934692', '0000001'),
(9, '前端跨域问题解决方案(基于node与nginx)', '<h1 data-v-67050868=\"\" class=\"article-title\" style=\"font-size:2.5rem;margin:0.67em 0px;line-height:1.5;color:#333333;font-family:-apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif;\"><span style=\"font-size:16px;\">前端跨域问题解决方案(基于node与nginx)</span><span style=\"font-size:16px;\">前端跨域问题解决方案(基于node与nginx)前端跨域问题解决方案(基于node与nginx)前端跨域问题解决方案(基于node与nginx)前端跨域问题解决方案(基于node与nginx)前端跨域问题解决方案(基于node与nginx)</span></h1>\r\n', ' 前端跨域问题解决方案(基于node与nginx)', '2019-01-10', 'YSU会员_54968261', 'luntan17'),
(10, '使用<a>标签时，你可能会忽略的一个安全问题', '<h1 data-v-67050868=\"\" class=\"article-title\" style=\"font-size:2.5rem;margin:0.67em 0px;line-height:1.5;color:#333333;font-family:-apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif;\"><span style=\"font-size:16px;\">使用&lt;a&gt;标签时，你可能会忽略的一个安全问题使用&lt;a&gt;标签时，你可能会忽略的一个安全问题使用&lt;a&gt;标签时，你可能会忽略的一个安全问题使用&lt;a&gt;标签时，你可能会忽略的一个安全问题使用&lt;a&gt;标签时，你可能会忽略的一个安全问题使用&lt;a&gt;标签时，你可能会忽略的一个安全问题</span></h1>\r\n', ' 使用<a>标签时，你可能会忽略的一个安全问题', '2019-01-10', 'YSU会员_18786621', 'yan001'),
(11, '其实我们可以少写点if else和switch', '<span style=\"color:#333333;font-family:-apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif;font-size:15px;\">作为搬砖在第一线的底层工人，业务场景从来是没有做不到只有想不到的复杂。</span><br style=\"color:#333333;font-family:-apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif;font-size:15px;\" />\r\n<span style=\"color:#333333;font-family:-apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif;font-size:15px;\">不过他强任他强，if-else全搞定，搬就完了。但是随着业务迭代或者项目交接，自己在看自己或者别人的if代码的时候，心情就不再表述了，各自深有体会。所以我们一起看看if还能怎么写</span><span style=\"color:#333333;font-family:-apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif;font-size:15px;\">作为搬砖在第一线的底层工人，业务场景从来是没有做不到只有想不到的复杂。</span><br style=\"color:#333333;font-family:-apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif;font-size:15px;\" />\r\n<span style=\"color:#333333;font-family:-apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif;font-size:15px;\">不过他强任他强，if-else全搞定，搬就完了。但是随着业务迭代或者项目交接，自己在看自己或者别人的if代码的时候，心情就不再表述了，各自深有体会。所以我们一起看看if还能怎么写</span><span style=\"color:#333333;font-family:-apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif;font-size:15px;\">作为搬砖在第一线的底层工人，业务场景从来是没有做不到只有想不到的复杂。</span><br style=\"color:#333333;font-family:-apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif;font-size:15px;\" />\r\n<span style=\"color:#333333;font-family:-apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif;font-size:15px;\">不过他强任他强，if-else全搞定，搬就完了。但是随着业务迭代或者项目交接，自己在看自己或者别人的if代码的时候，心情就不再表述了，各自深有体会。所以我们一起看看if还能怎么写</span>', ' 其实我们可以少写点if else和switch', '2019-01-10', '闫海亮三号', '147852369'),
(12, '前端模块化之AMD与CMD原理(附源码)', '<div><div><p>可能现在初入前端的同学们，都直接就上手webpack了，而在几年前，没有现在这些丰富的工具，还是jquery打天下的时候，不借助node或程序却让不同js文件之间互相引用、模块化开发，确实是一件痛苦的事情。。。</p>\r\n<p>接下来会介绍两个有名的工具AMD（require.js）和CMD（sea.js），虽然已基本不用了，但是前端们还是需要知道以前是怎么写代码的。。。</p>\r\n</div>\r\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。可能现在初入前端的同学们，都直接就上手webpack了，而在几年前，没有现在这些丰富的工具，还是jquery打天下的时候，不借助node或程序却让不同js文件之间互相引用、模块化开发，确实是一件痛苦的事情。。。</div>\r\n<div><div><p>接下来会介绍两个有名的工具AMD（require.js）和CMD（sea.js），虽然已基本不用了，但是前端们还是需要知道以前是怎么写代码的。。。<br />\r\n</p>\r\n<div><div><p><br />\r\n</p>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n', ' 前端模块化之AMD与CMD原理(附源码)', '2019-01-10', '闫海亮三号', '147852369'),
(14, '舒服撒地方是否', '大范甘迪个的大概是个', ' 舒服撒个地方官', '2019-01-11', '测试二号', '0000001'),
(15, '阿防守打法广告法', '发的噶地方官昂大概浮动', ' 啊个大范甘迪大风歌', '2019-01-11', 'YSU会员_68341064', '0000002');

-- --------------------------------------------------------

--
-- 表的结构 `plate`
--

DROP TABLE IF EXISTS `plate`;
CREATE TABLE IF NOT EXISTS `plate` (
  `plate_id` int(11) NOT NULL AUTO_INCREMENT COMMENT '板块id',
  `plate_name` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '板块名字',
  `plate_img` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '板块图片',
  PRIMARY KEY (`plate_id`)
) ENGINE=MyISAM AUTO_INCREMENT=9 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- 转存表中的数据 `plate`
--

INSERT INTO `plate` (`plate_id`, `plate_name`, `plate_img`) VALUES
(1, '板块1', 'images/01.jpg'),
(2, '板块2', 'images/01.jpg'),
(3, '板块3', 'images/01.jpg'),
(4, '板块4', 'images/01.jpg'),
(5, '板块5', 'images/01.jpg'),
(6, '板块6', 'images/01.jpg');

-- --------------------------------------------------------

--
-- 表的结构 `user`
--

DROP TABLE IF EXISTS `user`;
CREATE TABLE IF NOT EXISTS `user` (
  `user_id` int(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `user_name` varchar(50) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '存放用户名',
  `user_password` varchar(50) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '存放密码',
  `user_username` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '用户昵称',
  `user_email` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '用户邮箱',
  `user_telephone` char(11) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '手机号',
  `user_qq` varchar(20) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '用户QQ号',
  `user_weibo` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '用户微博',
  `user_intro` text COLLATE utf8mb4_unicode_ci COMMENT '用户简介',
  `user_photos` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '用户头像',
  `user_power` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  PRIMARY KEY (`user_id`)
) ENGINE=MyISAM AUTO_INCREMENT=35 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='存放用户账号信息';

--
-- 转存表中的数据 `user`
--

INSERT INTO `user` (`user_id`, `user_name`, `user_password`, `user_username`, `user_email`, `user_telephone`, `user_qq`, `user_weibo`, `user_intro`, `user_photos`, `user_power`) VALUES
(23, '1015951447', '123456', '闫海亮', '1015951447@qq.com', '13081872978', '1015951447', '超级管理员', '我是最高权限的！', NULL, '2'),
(25, '151304011004', '123456', 'YSU会员_1992797', NULL, NULL, NULL, NULL, NULL, NULL, '1'),
(24, '151304011003', '123456', '论坛一号该五号', '1015951447@qq.com', '13081872978', '1015951447', '五号已经就位', '五号已经就位', NULL, '0'),
(26, 'yhl_123456', '123456', '论坛3号', '123456789@qq.com', '12345678958', '1015951447', '第四个号', '简介 哈哈哈哈哈哈哈哈哈', NULL, '0'),
(27, '1000001', '123456', 'YSU会员_19839477', NULL, NULL, NULL, NULL, NULL, NULL, '0'),
(28, '151304011048', '123456', '论坛二号', '1015951447@qq.com', '13081872978', '1015951447', '哈哈哈', 'xxxx', NULL, '0'),
(29, '123456', '123456', '闫海亮0', '1015951447@qq.com', '12345678958', '1015951447', '领薪吕公馆', 'intro', NULL, '2'),
(30, 'luntan17', '123456', '论坛17号', '1015951447@qq.com', '13081872978', '1015951447', '17已经就位', '17已经就位', NULL, '0'),
(31, '147852369', '123456', '闫海亮三号', '1015951447@qq.com', '12345678958', '1015951447', '三号已经就位', '三号测试员', NULL, '0'),
(32, 'yan001', '123456', 'YSU会员_18786621', NULL, NULL, NULL, NULL, NULL, NULL, '1'),
(33, '0000001', '123456', '测试二号', '123456789@qq.com', '12345678958', '1015951447', '领薪吕公馆', 'intro发帖发帖', NULL, '1'),
(34, '0000002', '123456', 'YSU会员_68341064', NULL, NULL, NULL, NULL, NULL, NULL, NULL);
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
